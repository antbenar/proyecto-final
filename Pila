#ifndef PILA_H
#define PILA_H
#include <string>
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

template < class T >

class Pila{
    private:
        vector< T >elementos;

    public:
    bool empty(){
        if (elementos.empty()){
            cout<< "esta vacio"<<endl;
            return true;}
        else{
            cout << "no esta vacio"<<endl;
             return false;}
    };

    void push(const T &item){
        elementos.push_back(item);
    };

    T& top(){
        return elementos.back();
    };

    void pop(){
        if (elementos.empty())
            return ;
        else
            elementos.pop_back();
    };
    void print(){
        for(int i=0; i< elementos.size() ; i++)
            cout<< elementos[i]<< " ";
        cout << endl;
    };
    friend Stack operator+(Stack<T> a, Stack<T> b){
            Stack<T>temp;
            temp.elementos.resize(a.size()+b.size());
            for(int i=0;i<a1;i++)
                temp.elemetnos.push_back(a[i]);
            for(int i=0;i<b1;i++)
                temp.elementos.push_back(b[i]);
            return temp;
    };
};
#endif 










#include <iostream>
#include <Pila.h>
using namespace std;

int main()
{
    Pila<int>S1;
    S1.empty();
    S1.pop();
    S1.push(16);
    S1.empty();
    S1.push(17);
    S1.print();
    S1.pop();
    S1.print();
    Pila<int> S2;
    S2.push(23);
    int a=Stack.top();
    Pila<int> S3;
    S3=S1+S2;   
    cout<<S3;

    return 0;
}
